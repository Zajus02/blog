---
layout: post
title: On the Age of Content
date: 2024-08-26
categories: Technology
tags:
---

It is in the nature of children to desire the most advanced and the most exciting toys possible. I remember vaguely that when I was seven, somebody showed me their PlayStation (the first generation) and I was amazed by the games it could play. It took some begging (and several years) until I had my own console, and I can tell you that even today I remember every corner of some of the tracks in Gran Turismo 2.

Around the same time a neighbor of mine was given a PC, a very old one with MS DOS and a bunch of floppy disks with simple 2D games. This was prehistory in comparison to my brand new PlayStation, but somehow, the more opportunities I had to discover the functions of the old PC, the more interested I became. With PlayStation, you could play games, which was surely fun, but quite a limited one. In contrast to that, the PC was complicated to use and the games far from realistic, but the possibilities were practically endless. I did not throw my PlayStation away, but it was really clear what I really want is a PC.

It didn't take long before I had one, and with it came another novelty: the Internet. In 2001, the Internet was already booming (or busting, depending on who you ask), but if I was to describe it with one word, the word I would choose would be static. Posting something on the Internet is a simple thing today, but back in the first years of the third millennium, in the time before social networks and WordPress, you couldn't simply open the browser and share whatever you wanted the world to hear. You had to go the hard way. Yet, it was no rocket science and anybody at least a little curious could find out how to do it, because all you needed to do was to open the source code of any website and observe. PlayStation games were entertaining, PC games even more so, but both meant nothing in comparison with the Internet, the endless pool where you not only consumed. You could also create.

The rest of the story might already be quite obvious. After trying to figure out how websites work, the next step was to create one from scratch. First were the WYSIWYG editors, I remember creating simple websites (probably about computer games) using Microsoft Frontpage. Quite quickly the limits of this method became clear, and the next step was learning how to code in HTML. This was way more complicated, at least for the brain of a twelve year old, but also much more rewarding. But the pure HTML websites were ugly, and the name of the solution was CSS, which was at the time newly accepted as the right way to style websites. Simultaneously, static websites were already being replaced by something much more awesome, dynamic ones, and the possibilities grew exponentially. Java? Flash? PHP? Logically, I had to have a piece of everything, and so while my peers wished for new computer games (or bikes in case of the weirdos), I always begged my parents to buy me some new book about whichever technology I was just exploring. I am not saying that I didn't want a bike and games as well, but my desires were broader. I wanted to create, and to be able to create, I first needed to know how.

In the end, I never learned any programming language enough to make it a living, partially because I was told I am not smart enough to do so (more on that some other time). But still, all the years spent fooling around with all of those (now often dead and useless) technologies gave me a solid background which turned out to be useful on many ocassions. And all that was, in fact, fun. Nobody forced me, nobody in my surroundings even understood what am I trying to achieve. Without any external impulse I spent countless hours doing something that most kids considered boring and most adults would call work, and I benefited from it later in life, not directly by monetizing on these skills, but indirectly by absorbing something from each of them. So how was this passion born? I believe there are two conditions that had to be fulfilled:

1. Getting to a result must be simple enough
2. First condition must be obvious enough for everybody to see

Primo, `you cannot get excited about doing something that is so incredibly complex that it obscures your mind`, that you cannot see the end of it. That was the case of websites in the early 2000s. They were primitive, created using simple code which was largely understandable without any training. It didn't take a genius to imagine that you could create something like that. The websites of 2001 were also scaleable. From a set of very simple things you could build something complex. When one technology didn't do what you wanted, there was always another one lurking behind the corner, just slightly more complex than the one you already knew. This made things much easier to digest.

Secondo, it is necessary for the first signal to arrive. It is much easier to pick up a book and learn something if you already understand a little about how it works. This again was the case of websites, because it was so simple to see the code behind any website you visited.

In essence, the accumulation of knowledge worked like Lego. Whenever you see something made of Lego, you can immediately observe the individual blocks and the way they are connected. You can take it apart, and you can take another set of Lego blocks and try to recreate it, or start by building a simpler version of it. One block adds to another and in a couple of hours you have a detailed copy of Taj Mahal standing in the middle of your living room.

Once the general rule is known, it is now clear that my generation wasn't the only one benefiting from such a possibility. There is always something, and finding out what it is might only be complicated while looking backwards, because at its time, these opportunities were obvious. To make things simpler, let's keep our examples in the IT world. Just a generation before me there were no websites, but that does not mean there was nothing young brains could get excited about. In the time of Amiga, Apple II, first PCs and their likes, it was much more obvious that software is made out of blocks of code. But, as these programs and games were often first of its kind, they were simple, one could understand how they work if he tried hard enough, and could easily imagine creating some of his own. In other words, condition number one applied. On top of that, there was often no graphical user interface that stopped you from seeing the bare code, so we know that the condition number two (the "in your face effect", as I would like to call it) applies as well.

This also explains why, in my generation, very few kids started their programming career by creating games. At that time the games were already incredibly complex and they hid their code as much as they could. No twelve year old played a PlayStation game and though: I could create something like that. They maybe ended up creating PlayStation games in the end, but they definitively started somewhere else, where the bar was much lower, such as Flash games they played in the browser.

So how about the generation before? There were probably more of these per generation, but if I could guess which was the major one, I would name electronic circuits and simple logic. There were hardware level programming languages at the time, but to get excited by one, you first need to see it in practice and get blown away by its results, and the results of the computers of those days were too abstract and too distant for ordinary people to see.

But what is the "thing" today? What are the future IT experts excited about? How will this affect their future? I don't want to be a doomsayer, but in a way, I believe this window of opportunities is now closing, or at least moving to some other fields. The trend of today is simplification, being able to get the same results from an easier process. Nassim Nicolas Taleb said that tablet as a device is something that one can operate much more instinctively than a PC, using his fingers instead of a weird mouse-shaped artificially created device. The ape inside him knows how to use the tablet, and children can use it without being taught how. Tablet can do 90% of what ordinary user expects from a PC, but with much less effort needed to understand how things work. This becomes a problem for the hackers of the future.

PC's are buggy and when you try to do something, you are often halted by errors and failures. But when you really want to achieve something, you can dig in and you can overcome the issue by figuring out where the problem lies. This urges you to understand how things work. But as the technologies of today are getting more and more idiot-resistant and the number of visible errors decreases (both of which are good things!), you also loose the chance to learn by repairing. Because the number of hardware and software combinations within tablets and mobile phones (including the excessive amount of Android devices) is much smaller than number of different hardware and software combinations of PCs, you are less likely to stumble upon an error you can solve. When I couldn't launch a PC game, I have spent hours figuring out where the problem is and how to solve it, and often I succeeded. When a game on tablet doesn't work, there is next to nothing you can do - except for buying a new device.

As the technology gets more advanced, the conditions one and two are getting further away from being true. `The programming behind the current devices is incredibly complex and at the same time hidden from the eyes of a spectator`. Kids today cannot see what is behind the user interface, and if they could, they would be scared by its complexity. This doesn't mean that once the PC generation gets older, we will run out of new programmers, but rather that the IT experts of the future will probably get excited later in their lives, when they can grasp more complicated structures without being overloaded. Additionally, the PC isn't dead yet and some will definitely get intrigued by it's faults and possibilities, even though others may jump from browsing websites on a tablet straight to playing games on XBox without even thinking about what is behind the things they see.

The geek inside me isn't very happy about it, but I believe this all is a good thing. Instead of focusing on how things work, the kids of today and the kids of the future will be able to focus on something else: doing things that the tools they use are supposed to do. Here the possibilities are endless. With the young creators of simple games or websites, the problem was that to create a little bit of content, they had to create large supporting structures, the code behind the slick UI. The sentence "Hello, my name is John" takes up one line of code, the surroundings, even on plain website containing nothing else, will take up nine more. In terms of number of lines, to create one line of content you had to create ten lines in total. If you want to share something more complex, the amount of code could grow exponentially. But today? If you want to share that your name is John, you simply choose one of the numerous websites and type that your name is John. Job done, congratulations. Maybe you have learned nothing in the process, but it was effortless and the next time you might consider writing something longer, a story for example.

And this is just one in a million of possibilities. If you like a video you see on YouTube, you can immediately start re-creating, expanding or parodying it, usually with the same $200 device you used to watch the video in the first place. Do you like a song? Download countless of music making apps and see if you can create similar one. How about a picture? Well yes, paint a new Mona Lisa if you want, you can even use your fingers instead of a brush. Again, the possibilities are endless.

You may object that no good movies were filmed, no good songs composed and no good paintings created on iPad. Maybe, but the time is getting nearer. Serj Tankian, an accomplished artist, composed one of his albums using iPad in 2012. The album was no good but I wouldn't blame the iPad. Additionally, this is the first step. Do you enjoy creating YouTube videos using your iPad and want an upgrade? Sure thing, you already know what you need. It is the same thing as with young hackers, step by step you are getting good at something, getting the necessary skills and equipment during the process.

We are entering the age of content. The age in which if you want to share something with the world, you don't have to overcome any IT obstacles. It is exciting and frightening at the same time. It has the power to change people's lives. What you do at thirteen doesn't define your whole future, but it can give you a hint and it can help you build a foundation you can use in many years to come. The fact that you end up as a florist with the passion for and understanding of movie making, rather than a salesman with IT background, might not matter at all in the end. But it could.

Originally written circa 2013.
